---
import XElement from 'astro-xelement';
const {div: Carousel, button: Arrow, img: TargetImage, button:Target} = XElement;
---
<html lang="en">
	<head>
		<!-- SEO META TAGS -->
		<meta name="title" content="3DigitStudio - Showcase">
		<meta name="description" content="Showcase of web-based apartment filtering solutions for property developers.">	
		<meta name="keywords" content="property,3d,render,developer,showcase,web,webgl,visualisation,realistic">
		<meta name="robots" content="index, follow">
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta name="language" content="English">
		<meta name="viewport" content="width=device-width" />

		<!-- GLOBAL STYLESHEET -->
		<link rel="stylesheet" href="/style/global.css" />

		<title>Showcase - 3DigitStudio</title>
	</head>
	<body>
		<Carousel class="image-wrapper" @do={(element, store) =>{
			store.carousel = {
				index: 1,
				speed: 50,
				target: 0,
				limit: 71,
				loadedElements: 0,
				frameMap : {
				1: {'forward': 17, 'backwards': 50},
				17: {'forward': 38, 'backwards': 1},
				38: {'forward': 50, 'backwards': 17},
				50: {'forward': 1, 'backwards': 38}
				}
			};
			for(let i = store.carousel.index; i <= store.carousel.limit; i++){
				let link = document.createElement('link');
				link.rel = 'preload';
				link.as = 'image';
				link.href = `/images/carousel/filter_${((i < 10) ? '0' + i : i)}.jpg`;
				link.onload = () =>{
					store.carousel.loadedElements++;
				}
				document.head.appendChild(link);
			}
			store.checkLoading = () =>{
				if(store.carousel.loadedElements < 71){
					setTimeout(() => {
						store.checkLoading();
					}, 50);
				} else {
					overlay.style.display = 'none';
				}
			}
			store.checkLoading();
			store.instigators = [...this.querySelectorAll('button')];
			store.UpdateFrame = (backwards) => {
				if(store.carousel.index != store.carousel.target){
					setTimeout(() => {
						store.instigators.forEach(element => {
							element.disabled = true;
						});
						if(backwards){
							store.carousel.index = (store.carousel.index == 1) ? store.carousel.limit : store.carousel.index - 1;
						} else {
							store.carousel.index = (store.carousel.index == store.carousel.limit) ? 1 : store.carousel.index + 1;	
						}				
						image.src = `/images/carousel/filter_${((store.carousel.index < 10) ? '0' + store.carousel.index : store.carousel.index)}.jpg`;
						store.UpdateFrame(backwards);
					}, store.carousel.speed);
				} else {
					store.instigators.forEach(element => {
						element.removeAttribute('disabled');
					});
				}
			}
			window.store = store;
		}}>
			<TargetImage id="image" src="images/carousel/filter_01.jpg" />
			<Arrow class="arrow" @click={(event, store) =>{
				store.carousel.target = store.carousel.frameMap[store.carousel.index].backwards;
				store.UpdateFrame(true);
			}}></Arrow>
			<Arrow class="arrow right" @click={(event, store) => {
				store.carousel.target = store.carousel.frameMap[store.carousel.index].forward;
				store.UpdateFrame(false);
			}}></Arrow>
			<div class="target-wrapper">
				<Target class="target-button" @click={(event, store) => {
					if(store.carousel.target != 1){
						let back = (store.carousel.target > 17) ? false : true;
						store.carousel.target = 1;
						store.UpdateFrame(back);
					}
				}} >1</Target>
				<Target class="target-button" @click={(event, store) => {
					if(store.carousel.target != 17){
						// GO TO 17 ===== under 38 go back, if under 17, go front
						let back = (store.carousel.target < 38) ? false : true;
						store.carousel.target = 17;
						store.UpdateFrame(back);
					}
				}} >17</Target>
				<Target class="target-button" @click={(event, store) => {
					if(store.carousel.target != 38){
						let back = (store.carousel.target < 50) ? false : true;
						store.carousel.target = 38;
						store.UpdateFrame(back);
					}
				}} >38</Target>
				<Target class="target-button" @click={(event, store) => {
					if(store.carousel.target != 50){
						let back = (store.carousel.target < 17) ? true : false;
						store.carousel.target = 50;
						store.UpdateFrame(back);
					}
				}} >50</Target>
			</div>
			<XElement @is="div" id="overlay" class="loading-overlay">
				<div class="loader"></div>
			</XElement>
		</Carousel>
	</body>
</html>

<style>
body{
	display: flex;
	justify-content: center;
	align-items: center;
	width: 100%;
	height: 100vh;
}
.image-wrapper{
	width: 1280px;
	height: 720px;
	background: teal;
	position: absolute;
}
img{
	position: relative;
	width: 100%;
	height: 100%;
}
.arrow{
	position: absolute;
	left: 15px;
	width: 50px;
	height: 50px;
	background: cadetblue;
	top: 50%;
	transform: translateY(-50%);
	cursor: pointer;
}
.right {
	left: unset;
	right: 15px;
}
.target-wrapper{
	position: absolute;
	top: 15px;
	left: 50%;
	transform: translateX(-50%);
	height: 50px;
	width: 240px;
	display: flex;
	justify-content: space-between;
}
.target-button{
	height: 50px;
	width: 50px;
}
.loading-overlay{
	width: 100%;
	height: 100%;
	position: absolute;
	z-index: 10;
	top: 0;
	left: 0;
	background: rgba(0,0,0,0.8);
	display: flex;
	justify-content: center;
	align-items: center;
}
.loader,
.loader:after {
  border-radius: 50%;
  width: 10em;
  height: 10em;
}
.loader {
  font-size: 10px;
  position: relative;
  text-indent: -9999em;
  border-top: 1.1em solid rgba(255, 255, 255, 0.2);
  border-right: 1.1em solid rgba(255, 255, 255, 0.2);
  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
  border-left: 1.1em solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

</style>